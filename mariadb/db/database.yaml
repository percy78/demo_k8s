---
apiVersion: k8s.mariadb.com/v1alpha1
kind: Database
metadata:
  name: talkk8s
spec:
  # If you want the database to be created with a different name than the resource name
  # name: my-logical-database
  mariaDbRef:
    name: mariadb
  characterSet: utf8
  collate: utf8_general_ci
  # Delete the resource in the database whenever the CR gets deleted.
  # Alternatively, you can specify Skip in order to omit deletion.
  cleanupPolicy: Delete
  requeueInterval: 30s
  retryInterval: 5s
---
apiVersion: k8s.mariadb.com/v1alpha1
kind: User
metadata:
  name: demo-user
spec:
  # If you want the user to be created with a different name than the resource name
  # name: user-custom
  mariaDbRef:
    name: mariadb
  passwordSecretKeyRef:
    name: mariadb
    key: password
  # This field defaults to 10
  maxUserConnections: 20
  host: "%"
  # Delete the resource in the database whenever the CR gets deleted.
  # Alternatively, you can specify Skip in order to omit deletion.
  cleanupPolicy: Delete
  requeueInterval: 30s
  retryInterval: 5s
---
apiVersion: k8s.mariadb.com/v1alpha1
kind: Grant
metadata:
  name: demo-grant
spec:
  mariaDbRef:
    name: mariadb
  privileges:
     - "ALL PRIVILEGES"
  database: "talkk8s"
  table: "*"
  username: demo-user
  grantOption: true
  host: "%"
  # Delete the resource in the database whenever the CR gets deleted.
  # Alternatively, you can specify Skip in order to omit deletion.
  cleanupPolicy: Delete
  requeueInterval: 30s
  retryInterval: 5s
---
apiVersion: k8s.mariadb.com/v1alpha1
kind: SqlJob
metadata:
  name: 01-users
spec:
  mariaDbRef:
    name: mariadb
  inheritMetadata:
    annotations:
      database.myorg.io: mariadb
  podMetadata:
    labels:
      sidecar.istio.io/inject: "false"
  serviceAccountName: sqljob
  username: demo-user
  passwordSecretKeyRef:
    name: mariadb
    key: password
  database: talkk8s
  sql: |
    CREATE TABLE IF NOT EXISTS users (
      id bigint PRIMARY KEY AUTO_INCREMENT,
      username varchar(255) NOT NULL,
      UNIQUE KEY name__unique_idx (username)
    );
    INSERT INTO users(username) VALUES('mmontes11') 
      ON DUPLICATE KEY UPDATE id=id;
    INSERT INTO users(username) VALUES('Vidalee')
      ON DUPLICATE KEY UPDATE id=id;
    INSERT INTO users(username) VALUES('macno') 
      ON DUPLICATE KEY UPDATE id=id;
    INSERT INTO users(username) VALUES('eloylp') 
      ON DUPLICATE KEY UPDATE id=id;
    INSERT INTO users(username) VALUES('ksankeerth') 
      ON DUPLICATE KEY UPDATE id=id;
    INSERT INTO users(username) VALUES('stefan-bergstein') 
      ON DUPLICATE KEY UPDATE id=id;
    INSERT INTO users(username) VALUES('ola-gustafsson') 
      ON DUPLICATE KEY UPDATE id=id;
    --To be continued, contribute to mariadb-operator! ðŸ¦­
---
apiVersion: k8s.mariadb.com/v1alpha1
kind: SqlJob
metadata:
  name: 02-repos
spec:
  dependsOn:
    - name: 01-users
  mariaDbRef:
    name: mariadb
  username: demo-user
  passwordSecretKeyRef:
    name: mariadb
    key: password
  database: talkk8s
  sql: |
    CREATE TABLE IF NOT EXISTS repos (
      id bigint PRIMARY KEY AUTO_INCREMENT,
      name varchar(255) NOT NULL,
      owner_id bigint NOT NULL,
      UNIQUE KEY name__unique_idx (name),
      FOREIGN KEY (owner_id) REFERENCES users(id) ON DELETE CASCADE
    );
    INSERT INTO repos(name, owner_id) VALUES('mariadb-operator', (SELECT id FROM users WHERE username = 'mmontes11'))
      ON DUPLICATE KEY UPDATE id=id;
    INSERT INTO repos(name, owner_id) VALUES('mariadb-operator-helm', (SELECT id FROM users WHERE username = 'mmontes11'))
      ON DUPLICATE KEY UPDATE id=id;
    INSERT INTO repos(name, owner_id) VALUES('mariadb-ha-poc', (SELECT id FROM users WHERE username = 'mmontes11'))
      ON DUPLICATE KEY UPDATE id=id;
---
apiVersion: k8s.mariadb.com/v1alpha1
kind: SqlJob
metadata:
  name: 03-stars
spec:
  dependsOn:
    - name: 01-users
    - name: 02-repos
  mariaDbRef:
    name: mariadb
  schedule:
    cron: "*/1 * * * *"
    suspend: false
  timeZone: "UTC"
  username: demo-user
  passwordSecretKeyRef:
    name: mariadb
    key: password
  database: talkk8s
  sql: |
    CREATE TABLE IF NOT EXISTS stars (
      id bigint PRIMARY KEY AUTO_INCREMENT,
      user_id bigint NOT NULL,
      repo_id bigint NOT NULL,
      FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
      FOREIGN KEY (repo_id) REFERENCES repos(id) ON DELETE CASCADE,
      UNIQUE KEY (user_id, repo_id)
    );
    INSERT INTO stars(user_id, repo_id) 
      VALUES((SELECT id FROM users ORDER BY RAND() LIMIT 1), (SELECT id FROM repos ORDER BY RAND() LIMIT 1))
      ON DUPLICATE KEY UPDATE id=id;
    INSERT INTO stars(user_id, repo_id) 
      VALUES((SELECT id FROM users ORDER BY RAND() LIMIT 1), (SELECT id FROM repos ORDER BY RAND() LIMIT 1))
      ON DUPLICATE KEY UPDATE id=id;
    INSERT INTO stars(user_id, repo_id) 
      VALUES((SELECT id FROM users ORDER BY RAND() LIMIT 1), (SELECT id FROM repos ORDER BY RAND() LIMIT 1))
      ON DUPLICATE KEY UPDATE id=id;
    INSERT INTO stars(user_id, repo_id) 
      VALUES((SELECT id FROM users ORDER BY RAND() LIMIT 1), (SELECT id FROM repos ORDER BY RAND() LIMIT 1))
      ON DUPLICATE KEY UPDATE id=id;
    INSERT INTO stars(user_id, repo_id) 
      VALUES((SELECT id FROM users ORDER BY RAND() LIMIT 1), (SELECT id FROM repos ORDER BY RAND() LIMIT 1))
      ON DUPLICATE KEY UPDATE id=id;
    DELETE FROM stars WHERE id = (SELECT id FROM stars ORDER BY RAND() LIMIT 1);
    DELETE FROM stars WHERE id = (SELECT id FROM stars ORDER BY RAND() LIMIT 1);
    DELETE FROM stars WHERE id = (SELECT id FROM stars ORDER BY RAND() LIMIT 1);
    SELECT r.name AS repo, COUNT(*) AS stars
    FROM stars s
    JOIN repos r
    ON s.repo_id = r.id
    GROUP BY r.id
    ORDER BY stars DESC;